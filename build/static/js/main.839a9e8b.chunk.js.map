{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ListItem","name","this","props","deleteItem","completeTask","_this","react_default","a","createElement","data","map","element","className","key","type","checked","status","onChange","bind","style","textDecorationLine","onClick","deleteTask","Component","Boolean","window","location","hostname","match","TodoList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","list","inputVal","setState","concat","toConsumableArray","e","target","value","filter","_this2","forEach","index","item","push","assign","src_App","handleChange","placeholder","addTask","ReactDOM","render","src_TodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNA8BeA,kMA1BFC,GACTC,KAAKC,MAAMC,WAAWH,wCAEXA,GACXC,KAAKC,MAAME,aAAaJ,oCAEjB,IAAAK,EAAAJ,KACP,OACEK,EAAAC,EAAAC,cAAA,UAEIP,KAAKC,MAAMO,KAAKC,IAAI,SAAAC,GAClB,OACEL,EAAAC,EAAAC,cAAA,MAAII,UAAU,WAAWC,IAAKF,EAAQX,MACpCM,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WACVC,QAA4B,IAAnBJ,EAAQK,OACjBC,SAAUZ,EAAKD,aAAac,KAAKb,EAAMM,EAAQX,QACjDM,EAAAC,EAAAC,cAAA,QAAMW,MAAO,CAACC,mBAAuC,IAAnBT,EAAQK,OAAe,OAAS,iBAAkBL,EAAQX,MAC5FM,EAAAC,EAAAC,cAAA,UAAQI,UAAU,SAASS,QAAShB,EAAKiB,WAAWJ,KAAKb,EAAMM,EAAQX,OAAvE,2BAlBOuB,cCSHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCXAC,cACJ,SAAAA,IAAc,IAAAxB,EAAA,OAAAyB,OAAAC,EAAA,EAAAD,CAAA7B,KAAA4B,IACZxB,EAAAyB,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjC,QACKkC,MAAQ,CACXC,KAAM,CAAC,CACLpC,KAAM,gBAAiBgB,OAAQ,GAC/B,CACAhB,KAAM,eAAgBgB,OAAQ,GAC7B,CACDhB,KAAM,uBAAwBgB,OAAQ,GACrC,CACDhB,KAAM,uBAAwBgB,OAAQ,IAExCqB,SAAU,IAZAhC,yEAgBPJ,KAAKkC,MAAME,UAChBpC,KAAKqC,SAAS,CACZF,KAAI,GAAAG,OAAAT,OAAAU,EAAA,EAAAV,CAAM7B,KAAKkC,MAAMC,MAAjB,CAAuB,CACzBpC,KAAMC,KAAKkC,MAAME,SACjBrB,OAAQ,KAEVqB,SAAU,0CAGDI,GACXxC,KAAKqC,SAAS,CACZD,SAAUI,EAAEC,OAAOC,2CAGZ3C,GACT,IAAMS,EAAOR,KAAKkC,MAAMC,KAAKQ,OAAO,SAAAjC,GAAO,OAAIA,EAAQX,OAASA,IAChEC,KAAKqC,SAAS,CACZF,KAAM3B,yCAGGT,GAAM,IAAA6C,EAAA5C,KACX4B,EAAW,GACjB5B,KAAKkC,MAAMC,KAAKU,QAAQ,SAACnC,EAASoC,GAChC,GAAIpC,EAAQX,OAASA,EAAM,CACzB,IAAMgD,EAAOH,EAAKV,MAAMC,KAAKW,GAC7BlB,EAASoB,KAAKnB,OAAOoB,OAAO,GAAIF,EAAM,CAAChC,OAAwB,IAAhBgC,EAAKhC,OAAe,EAAI,KACvE6B,EAAKP,SAAS,CACZF,KAAMP,SAGRA,EAASoB,KAAKtC,sCAKlB,OACEL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACfN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,UAAlB,mBACAN,EAAAC,EAAAC,cAAC2C,EAAD,CAAU1C,KAAMR,KAAKkC,MAAMC,KAAMjC,WAAYF,KAAKE,WAAWe,KAAKjB,MAChEG,aAAcH,KAAKG,aAAac,KAAKjB,QACvCK,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAO6B,MAAO1C,KAAKkC,MAAME,SAAUpB,SAAUhB,KAAKmD,aAAalC,KAAKjB,MAAOoD,YAAY,qBACnG/C,EAAAC,EAAAC,cAAA,UAAQI,UAAU,UAAUS,QAASpB,KAAKqD,QAAQpC,KAAKjB,OAAvD,yBA3DesB,aAmEvBgC,IAASC,OACPlD,EAAAC,EAAAC,cAACiD,EAAD,MACAC,SAASC,eAAe,SDqDpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.839a9e8b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nclass ListItem extends Component {\n  deleteTask(name) {\n    this.props.deleteItem(name)\n  }\n  completeTask(name) {\n    this.props.completeTask(name)\n  }\n  render() {\n    return (\n      <ul>\n        {\n          this.props.data.map(element => {\n            return (\n              <li className=\"listItem\" key={element.name}>\n                <input type=\"checkbox\"\n                  checked={element.status === 1}\n                  onChange={this.completeTask.bind(this, element.name)}/>\n                <span style={{textDecorationLine: element.status === 0 ? 'none' : 'line-through'}}>{element.name}</span>\n                <button className=\"delete\" onClick={this.deleteTask.bind(this, element.name)}>删除</button>\n              </li>)\n        })\n      }\n      </ul>\n    )\n  }\n}\n\nexport default ListItem","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ListItem from './App';\n// import logo from './logo.svg'\nimport * as serviceWorker from './serviceWorker';\n\nclass TodoList extends Component {\n  constructor() {\n    super()\n    this.state = {\n      list: [{\n        name: 'learn english', status: 0\n      },{\n        name: 'Learn guitar', status: 0\n      }, {\n        name: 'weight less than 100', status: 0\n      }, {\n        name: 'have 100,000 deposit', status: 0\n      }],\n      inputVal: ''\n    }\n  }\n  addTask() {\n    if (!this.state.inputVal) return\n    this.setState({\n      list: [...this.state.list, {\n        name: this.state.inputVal,\n        status: 0\n      }],\n      inputVal: ''\n    })\n  }\n  handleChange(e) {\n    this.setState({\n      inputVal: e.target.value\n    })\n  }\n  deleteItem(name) {\n    const data = this.state.list.filter(element => element.name !== name)\n    this.setState({\n      list: data\n    })\n  }\n  completeTask(name) {\n    const TodoList = []\n    this.state.list.forEach((element, index) => {\n      if (element.name === name) {\n        const item = this.state.list[index]\n        TodoList.push(Object.assign({}, item, {status: item.status === 0 ? 1 : 0}))\n        this.setState({\n          list: TodoList\n        })\n      } else {\n        TodoList.push(element)\n      }\n    })\n  }\n  render() {\n    return (\n      <div className=\"reactTodoList\">\n      <header className=\"header\">React todo list</header>\n      <ListItem data={this.state.list} deleteItem={this.deleteItem.bind(this)}\n        completeTask={this.completeTask.bind(this)}/>\n      <footer>\n        <input type=\"text\" value={this.state.inputVal} onChange={this.handleChange.bind(this)} placeholder=\"添加todo\"></input>\n        <button className=\"addTodo\" onClick={this.addTask.bind(this)}>添加</button>\n      </footer>\n    </div>\n    )\n  }\n}\n\n\nReactDOM.render(\n  <TodoList />,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}